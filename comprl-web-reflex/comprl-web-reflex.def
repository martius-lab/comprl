# Container to run comprl-web-reflex.  Based on
# https://github.com/reflex-dev/reflex/tree/main/docker-example/simple-two-port

bootstrap: docker
from: python:3.12

%arguments
    COMPRL_GIT_BRANCH=main

%post
    set -e
    export DEBIAN_FRONTEND=noninteractive

    apt-get update
    apt-get install -y git caddy redis-server curl

    git clone https://github.com/martius-lab/teamproject-competition-server --depth 1 -b "{{ COMPRL_GIT_BRANCH }}" /comprl

    python3 -m venv /venv
    . /venv/bin/activate

    pip install /comprl/comprl
    pip install -r /comprl/comprl-web-reflex/requirements.txt

    mkdir /comprl-config

    # set up reflex
    cd /comprl/comprl-web-reflex

    # A valid configuration must be provided, otherwise `reflex export` will
    # fail...  However, the database doesn't need to be populated and everything
    # can be overwritten at runtime
    export COMPRL_CONFIG_PATH="/comprl-config/config.toml"
    echo '[CompetitionServer]' > $COMPRL_CONFIG_PATH
    echo 'registration_key = "BUILDTIME"' >> $COMPRL_CONFIG_PATH
    echo 'database_path = "/tmp/foobar.db"' >> $COMPRL_CONFIG_PATH
    touch /tmp/foobar.db

    # Deploy templates and prepare app
    reflex init
    # Download all npm dependencies and compile frontend
    reflex export --frontend-only --no-zip


    # cleanup
    apt-get clean
    pip cache purge

%environment
    export REDIS_URL=redis://localhost
    export COMPRL_CONFIG_PATH="/comprl-config/config.toml"
    export NTFY_TOPIC="comprl-server-monitor"

%startscript
    curl -d "Start comprl web interface" ntfy.sh/${NTFY_TOPIC}

    . /venv/bin/activate
    redis-server --daemonize yes
    cd /comprl/comprl-web-reflex
    reflex run --env prod "$@"

    curl -H "Priority: urgent" -H "Tags: warning" -d "comprl web interface terminated. Exit code: $?" ntfy.sh/${NTFY_TOPIC}
